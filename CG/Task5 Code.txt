 a)
  //Setup the transformations of the three blue collision planes
  //TODO: find rotations and translations (no scalings!) such that
  //the particle ray hits
  // *first the red plane
  // *then three blue planes
  // *and finally the green plane
  gCollisionPlanes[1]->modelMatrix().rotateXYZ(0, 45, 0);
  gCollisionPlanes[1]->modelMatrix().translate(9.5, 0, 5);
  gCollisionPlanes[2]->modelMatrix().rotateXYZ(0, -60, 0);
  gCollisionPlanes[2]->modelMatrix().translate(1.1f,0,1);
  gCollisionPlanes[3]->modelMatrix().translate(2.2f,0,0);
  
  b)
    Vec3f computeForce(const Particle & forceParticle, const Vec3f &otherParticlePosition) const override
  {
	  // 20f around force particle = sphere radius
	  float radius = 20;
	  // 20f around sphere = influence radius
	  float forceInfluenceRadius = 20;
	  // Vector from force to other particle
	  Vec3f forceToPart = otherParticlePosition - forceParticle.position;
	  // intersection sphere vector above
	  Vec3f posOnEdge = radius * forceToPart.normalize();
	  // vector to intersection
	  Vec3f toEdge = otherParticlePosition - posOnEdge;
	  // distance to intersection
	  float distFromEdge = toEdge.length();
	  // if farer away than influence -> no force
	  if (distFromEdge > forceInfluenceRadius) {
		  return Vec3f(0.0f, 0.0f, 0.0f);
	  }
	  // force vector depending on distance
	  return (forceInfluenceRadius-distFromEdge) * toEdge.normalize();
  }

c) 
void ParticleEmitter::fireworkStep(float dt)
{
  //Iterate over all active particles
  for(std::list<size_t>::iterator iter = mActiveParticles.begin(); iter != mActiveParticles.end(); ++iter)
  {
    Particle &p = mParticles[*iter];

    //TODO: fireworks
    // A fireworks is based on particles that emit new particles
    // when exploding / dying.

    // Note: you may only want to handle those particles that have been
    // emitted by the emitter and not from you
    // For this you can check if the variable
    // particle.isSpecialParticle == 0.f

	if (p.isSpecialParticle == 0 && p.lifeLeft < 1) {
		for (int i = 0; i < 100; ++i) {
			// E.g. for new particles
			Particle newParticle = createParticle();
			// set it particle, that does not explode again
			newParticle.isSpecialParticle = p.isSpecialParticle + 10.f;
			// getting a Vektor on Unit Sphere
			Vec3f units = Math::sampleUnitSphere();
			// setting new particle position somewhere between p.position and unit sphere
			newParticle.position = p.position + units*Math::random();
			// setting velocity so the new particle goes away from exploding particle
			newParticle.velocity = units * 2.5f;
			// having not so long lifespan for firework effect
			newParticle.lifeLeft = Math::random()*1.5f;
			size_t newParticleIndex = mParticles.size();
			this->addParticle(newParticle, newParticleIndex);
		}
	}

    // Note: you can obtain uniform samples of a new using
	

    // Note: do not explicitly remove Particle p in this loop
    // If you want to get rid off it, call p.lifeLeft=0;
  }